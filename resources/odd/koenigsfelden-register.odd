<?teipublisher output="web"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>KÃ¶nigsfelden - registers</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition source="koenigsfelden.css"/>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2024-02-06Z">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="koenigsfelden-register" source="teipublisher.odd"> <elementSpec ident="person" mode="add">
                    <modelSequence>
            <model behaviour="heading">
                <param name="content" value="persName[@type eq 'main']"/>
                <param name="level" value="2"/>
            </model>
            <model behaviour="list">
                <param name="content" value="(persName[@type eq 'full'], birth, death, occupation[1], event)"/>
            </model>
            <model behaviour="pass-through">
                <param name="ref" value="@xml:id"/>
                <pb:template xmlns="" xml:space="preserve"><h4>Links zu externen Ressourcen</h4>
<ul>
  <li><a href="https://www.ssrq-sds-fds.ch/persons-db-edit/?query=[[ref]]" target="_blank">ssrq</a></li>
</ul></pb:template>
            </model>
            <model predicate="affiliation[@type eq 'org']" behaviour="inline">
                <param name="content" value="ext-html:get-links(affiliation/@ref, 'org')"/>
                <pb:template xmlns="" xml:space="preserve"><h4>Organisationen / Familien</h4>
<ul>
  [[content]]
</ul></pb:template>
            </model>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="org" mode="add">
                    <modelSequence>
            <model behaviour="heading">
                <param name="content" value="orgName[1]/string()"/>
                <param name="level" value="2"/>
            </model>
            <model behaviour="list">
                <param name="content" value="(orgName[2], head((desc[@xml:lang eq 'de'], desc)), event)"/>
            </model>
            <model behaviour="pass-through">
                <param name="ref" value="@xml:id"/>
                <pb:template xmlns="" xml:space="preserve"><h4>Links zu externen Ressourcen</h4>
<ul>
  <li><a href="https://www.ssrq-sds-fds.ch/persons-db-edit/?query=[[ref]]" target="_blank">ssrq</a></li>
</ul></pb:template>
            </model>
            <model behaviour="pass-through">
                <param name="content" value="ext-html:get-links(@xml:id, 'person')"/>
            </model>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="bibl" mode="change"/>
                <elementSpec ident="place" mode="add">
                    <modelSequence>
            <model behaviour="heading">
                <param name="level" value="2"/>
                <param name="content" value="placeName"/>
            </model>
            <model behaviour="list">
                <param name="content" value="(location, note[1])"/>
            </model>
            <model predicate="location/geo" behaviour="pass-through">
                <param name="content" value="location/geo"/>
            </model>
            <model behaviour="pass-through">
                <param name="ref" value="@xml:id"/>
                <param name="content" value="bibl"/>
                <pb:template xmlns="" xml:space="preserve"><h4>Links zu externen Ressourcen</h4>
<ul>
  <li><a href="https://www.ssrq-sds-fds.ch/places-db-edit/views/view-place.xq?id=[[ref]]" target="_blank">ssrq</a></li>
  [[content]]
</ul></pb:template>
            </model>
        </modelSequence>
                </elementSpec>
            <elementSpec ident="idno" mode="add">
                    <model predicate="@type eq 'GeoNames'" behaviour="listItem">
            <param name="content" value="@type || ' ' || ."/>
            <param name="uri" value="'http://www.geonames.org/' || ."/>
            <pb:template xmlns="" xml:space="preserve"><a href="[[uri]]" target="_blank">[[content]]</a></pb:template>
        </model>
                    <model predicate="@type eq 'TGN'" behaviour="listItem">
            <param name="ref" value="@xml:id"/>
            <param name="content" value="@type || ' ' || ."/>
            <pb:template xmlns="" xml:space="preserve"><a href="http://www.getty.edu/vow/TGNFullDisplay?find=[[ref]]&amp;place=&amp;nation=&amp;english=Y&amp;subjectid=[[ref]]" target="_blank">[[content]]</a></pb:template>
        </model>
                    <model predicate="@type eq 'GND'" behaviour="listItem">
            <param name="content" value="@type || ' ' || ."/>
            <param name="uri" value="'http://d-nb.info/gnd/' || ."/>
            <pb:template xmlns="" xml:space="preserve"><a href="[[uri]]" target="_blank">[[content]]</a></pb:template>
        </model>
                    <model predicate="@type eq 'ortsnamen.ch'" behaviour="listItem">
            <param name="uri" value="'http://search.ortsnamen.ch/record/' || ."/>
            <param name="content" value="@type || ' ' || ."/>
            <pb:template xmlns="" xml:space="preserve"><a href="[[uri]]" target="_blank">[[content]]</a></pb:template>
        </model>
                    <model predicate="@type eq 'HLS'" behaviour="listItem">
            <param name="uri" value="'http://www.hls-dhs-dss.ch/textes/d/D' || . || '.php'"/>
            <param name="content" value="@type || ' ' || ."/>
            <pb:template xmlns="" xml:space="preserve"><a href="[[uri]]" target="_blank">[[content]]</a></pb:template>
        </model>
                    <model predicate="@type eq 'URL'" behaviour="listItem">
            <pb:template xmlns="" xml:space="preserve"><a href="[[content]]" target="_blank">[[content]]</a></pb:template>
        </model>
                    <model behaviour="omit"/>
                </elementSpec>
                <elementSpec ident="location" mode="add">
                    <modelSequence>
            <model predicate="country and not(region)" behaviour="listItem">
                <param name="content" value="country"/>
                <pb:template xmlns="" xml:space="preserve"><strong>Standort</strong>: [[content]]</pb:template>
            </model>
            <model predicate="region" behaviour="pass-through">
                <param name="content" value="string-join(region, ', ')"/>
                <pb:template xmlns="" xml:space="preserve"><li><strong>Standort</strong>: [[content]]</li></pb:template>
            </model>
        </modelSequence>
                </elementSpec>
            <elementSpec ident="category" mode="add">
                    <modelSequence>
            <model behaviour="heading">
                <param name="content" value="catDesc"/>
                <param name="level" value="2"/>
            </model>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="birth" mode="add">
                    <model behaviour="pass-through">
            <param name="content" value="./string()"/>
            <pb:template xmlns="" xml:space="preserve"><li><strong>Geburtsdatum</strong>: [[content]]</li></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="death" mode="add">
                    <model behaviour="pass-through">
            <param name="content" value="./string()"/>
            <pb:template xmlns="" xml:space="preserve"><li><strong>Todesdatum</strong>: [[content]]</li></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="event" mode="add">
                    <model behaviour="pass-through">
            <param name="label" value="label/string()"/>
            <param name="content" value="@when-custom"/>
            <pb:template xmlns="" xml:space="preserve"><li><strong>[[label]]</strong>: [[content]]</li></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="persName" mode="add">
                    <model predicate="@type eq 'full' and persName" behaviour="inline">
            <param name="surname" value="let $surname := for $x in persName return $x/surname || ' (' || $x/@xml:lang || ')' return string-join($surname, ', ')"/>
            <param name="forename" value="let $forename := for $x in persName return $x/forename || ' (' || $x/@xml:lang || ')' return string-join($forename, ', ')"/>
            <pb:template xmlns="" xml:space="preserve"><li><strong>Name</strong>: <ul><li>Nachname(n): [[surname]]</li> <li>Vorname(n): [[forename]]</li></ul></li></pb:template>
        </model>
                    <model predicate="@type eq 'full'" behaviour="pass-through">
            <param name="surname" value="string-join(surname, ', ')"/>
            <param name="forename" value="string-join(forename, ', ')"/>
            <param name="genName" value="genName[1]"/>
            <pb:template xmlns="" xml:space="preserve"><li><strong>Name</strong>: <ul><li>Nachname(n): [[surname]]</li> <li>Vorname(n): [[forename]] [[genName]]</li></ul></li></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="occupation" mode="add">
                    <model behaviour="pass-through">
            <param name="content" value="string-join((., following-sibling::occupation), '; ')"/>
            <pb:template xmlns="" xml:space="preserve"><li><strong>Rolle/Beruf</strong>: [[content]]</li></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="desc" mode="add">
                    <model predicate="parent::org" behaviour="pass-through">
            <param name="content" value="./string()"/>
            <pb:template xmlns="" xml:space="preserve"><li><strong>Typ</strong>: [[content]]</li></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="orgName" mode="add">
                    <model behaviour="pass-through">
            <param name="content" value="string-join((., following-sibling::orgName), ', ')"/>
            <pb:template xmlns="" xml:space="preserve"><li><strong>Andere Namen</strong>: [[content]]</li></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="geo" mode="add">
                    <model behaviour="pass-through">
            <param name="lat" value="tokenize(., '\s+')[1]"/>
            <param name="long" value="tokenize(., '\s+')[2]"/>
            <param name="label" value="ancestor::place/placeName[1]/string()"/>
            <pb:template xmlns="" xml:space="preserve"><pb-geolocation latitude="[[lat]]" longitude="[[long]]" label="[[label]]" event="click" style="color: var(--pb-color-start);font-weight:bold;">Siehe Karte</pb-geolocation></pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="note" mode="change">
                    <model predicate="parent::place" behaviour="pass-through">
            <param name="content" value="string-join((., following-sibling::desc), ', ')"/>
            <pb:template xmlns="" xml:space="preserve"><li><strong>Kategorie(n)</strong>: [[content]]</li></pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="genName" mode="add">
                    <model behaviour="listItem">
            <param name="content" value="string-join((., following-sibling::genName), '; ')"/>
            <pb:template xmlns="" xml:space="preserve">Ordinalzahle(n): [[content]]</pb:template>
        </model>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>